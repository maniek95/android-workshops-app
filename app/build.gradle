apply plugin: 'com.android.application'

static def varToCamelCase(String envVarName) {
    envVarName.split('_').collect { it -> it.toLowerCase().capitalize() }.join()
}

ext {
    keyConfigPath = "${projectDir.path}/../secret.properties"
    File keyConfigFile = file(keyConfigPath)
    keyProps = new Properties();

    if (keyConfigFile.exists()) {
        keyProps.load(keyConfigFile.newInputStream())
    } else {
        throw new FileNotFoundException("File $keyConfigPath not found")
    }

    keyProperty = { var ->
        propNameCase = varToCamelCase(var)
        prop = keyProps[propNameCase]
        if (prop == null || prop.toString().isEmpty())
            throw new MissingPropertyException("Missing property $propNameCase")
        prop
    }
}

ext {
    secrets = [
            stackOverflowClientId      : keyProperty("STACKOVERFLOW_CLIENT_ID"),
            stackOverflowClientKey     : keyProperty("STACKOVERFLOW_CLIENT_KEY"),
            stackOverflowClientSecret  : keyProperty("STACKOVERFLOW_CLIENT_SECRET"),
            stackOverflowOauthRedirect : keyProperty("STACKOVERFLOW_OAUTH_REDIRECT")
    ]
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "co.netguru.android.androidworkshopsapp"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField 'String', 'STACKOVERFLOW_CLIENT_ID', '"' + secrets.stackOverflowClientId + '"'
        buildConfigField 'String', 'STACKOVERFLOW_CLIENT_KEY', '"' + secrets.stackOverflowClientKey + '"'
        buildConfigField 'String', 'STACKOVERFLOW_CLIENT_SECRET', '"' + secrets.stackOverflowClientSecret + '"'
        buildConfigField 'String', 'STACKOVERFLOW_OAUTH_REDIRECT', '"' + secrets.stackOverflowOauthRedirect + '"'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'

    //Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'

    //OkHttp
    compile 'com.squareup.okhttp3:okhttp:3.8.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.0'

    //Gson
    compile 'com.google.code.gson:gson:2.8.0'

    //ButterKnife
    compile 'com.jakewharton:butterknife:8.6.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'

    //Glide
    compile 'com.github.bumptech.glide:glide:3.8.0'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
}
